import { eq } from "drizzle-orm";
import { rateLimiter } from "hono-rate-limiter";
import { bearerAuth } from "hono/bearer-auth";
import { prettyJSON } from "hono/pretty-json";

import { getConnInfo } from "@hono/node-server/conninfo";
import { swaggerUI } from "@hono/swagger-ui";

import { getDb } from "#/db";
import { flareKeys } from "#/db/schema";
import { title } from "#/helpers/static";
import type { AppServer } from "#/server";
import { routes } from "#/server/helpers/routes";

const setupAPI = (
  server: AppServer,
  { apiVersion }: { apiVersion: string },
) => {
  server.use(
    `${routes.api.root}/*`,
    //
    // << ADD RATE LIMITER
    //
    rateLimiter({
      windowMs: 15 * 60 * 1000, // 15 minutes
      limit: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes).
      standardHeaders: "draft-6", // draft-6: `RateLimit-*` headers; draft-7: combined `RateLimit` header
      keyGenerator: (c) => {
        const {
          remote: { address },
        } = getConnInfo(c);

        // Default: use IP address from request
        // const ip =
        //   c.req.header("cf-connecting-ip") ||
        //   c.req.header("x-forwarded-for") ||
        //   c.req.raw.headers.get("x-real-ip");
        return address || "unknown";
      },
      // store: ... , // Redis, MemoryStore, etc. See below.
    }),
    //
    // CHECKS FOR TOKEN
    //
    bearerAuth({
      verifyToken: async (token, { status, set }) => {
        //
        const foundTokens = await getDb()
          .select({ ddnsForDomain: flareKeys.ddnsForDomain })
          .from(flareKeys)
          .where(eq(flareKeys.apiKey, token))
          .limit(1);

        //
        if (foundTokens.length != 1) {
          status(403);
          return false;
        }

        //
        set("apiContext", { ddnsForDomain: foundTokens[0].ddnsForDomain });

        //
        return true;
      },
    }),
  );

  /// Swagger UI ///

  //
  server.get(
    routes.swagger.ui,
    swaggerUI({
      url: routes.swagger.doc,
    }),
  );

  server.use(routes.swagger.doc, prettyJSON());
  server.doc(routes.swagger.doc, {
    info: {
      title,
      version: apiVersion,
      description:
        "All requests require an authentication token generated by the Pierceflare server, associated with a DDNS domain.",
    },
    openapi: "3.0.0",
  });
};

export default setupAPI;
